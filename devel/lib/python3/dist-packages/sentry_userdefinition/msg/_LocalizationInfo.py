# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sentry_userdefinition/LocalizationInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LocalizationInfo(genpy.Message):
  _md5sum = "4480d6179e334a6455057a4ec084d3ef"
  _type = "sentry_userdefinition/LocalizationInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool if_relocation
float64 point_cloud_quantity
float64 tranDist
float64 angleDist
float64 angle_apeed
float64 score
bool if_match_success
"""
  __slots__ = ['if_relocation','point_cloud_quantity','tranDist','angleDist','angle_apeed','score','if_match_success']
  _slot_types = ['bool','float64','float64','float64','float64','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       if_relocation,point_cloud_quantity,tranDist,angleDist,angle_apeed,score,if_match_success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LocalizationInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.if_relocation is None:
        self.if_relocation = False
      if self.point_cloud_quantity is None:
        self.point_cloud_quantity = 0.
      if self.tranDist is None:
        self.tranDist = 0.
      if self.angleDist is None:
        self.angleDist = 0.
      if self.angle_apeed is None:
        self.angle_apeed = 0.
      if self.score is None:
        self.score = 0.
      if self.if_match_success is None:
        self.if_match_success = False
    else:
      self.if_relocation = False
      self.point_cloud_quantity = 0.
      self.tranDist = 0.
      self.angleDist = 0.
      self.angle_apeed = 0.
      self.score = 0.
      self.if_match_success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B5dB().pack(_x.if_relocation, _x.point_cloud_quantity, _x.tranDist, _x.angleDist, _x.angle_apeed, _x.score, _x.if_match_success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 42
      (_x.if_relocation, _x.point_cloud_quantity, _x.tranDist, _x.angleDist, _x.angle_apeed, _x.score, _x.if_match_success,) = _get_struct_B5dB().unpack(str[start:end])
      self.if_relocation = bool(self.if_relocation)
      self.if_match_success = bool(self.if_match_success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B5dB().pack(_x.if_relocation, _x.point_cloud_quantity, _x.tranDist, _x.angleDist, _x.angle_apeed, _x.score, _x.if_match_success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 42
      (_x.if_relocation, _x.point_cloud_quantity, _x.tranDist, _x.angleDist, _x.angle_apeed, _x.score, _x.if_match_success,) = _get_struct_B5dB().unpack(str[start:end])
      self.if_relocation = bool(self.if_relocation)
      self.if_match_success = bool(self.if_match_success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B5dB = None
def _get_struct_B5dB():
    global _struct_B5dB
    if _struct_B5dB is None:
        _struct_B5dB = struct.Struct("<B5dB")
    return _struct_B5dB
